name: Release JDKCertsTool

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release version tag (e.g., v1.0.0)'
        required: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write # Needed for creating releases, tags, and pushing Homebrew formula

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git operations like checking for existing tags

      - name: Update version in build.gradle.kts
        run: |
          TAG_VERSION=${{ github.event.inputs.tag }}
          VERSION=${TAG_VERSION#v}

          # Update version in build.gradle.kts
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" build.gradle.kts

          # Commit the version bump only if there are changes
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add build.gradle.kts
          
          if git diff --cached --quiet; then
            echo "No version change needed. Skipping commit."
          else
            git commit -m "Bump version to $VERSION"
          fi          

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build fat JAR
        run: ./gradlew shadowJar

      - name: Prepare release artifacts
        run: |
          mkdir release
          cp build/libs/JDKCertsTool-*.jar release/jdkcertstool.jar
          cp scripts/jdkcerts release/jdkcerts
          chmod +x release/jdkcerts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: "Release ${{ github.event.inputs.tag }}"
          draft: false
          prerelease: false
          files: |
            release/jdkcertstool.jar
            release/jdkcerts

      - name: Generate Homebrew formula
        run: |
          ./scripts/generate_homebrew_formula.sh ${{ github.event.inputs.tag }}

      - name: Commit and push Homebrew formula
        # Only commit if there are changes. Push to the default branch (e.g., main).
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Formula/jdkcerts.rb
          git diff --cached --exit-code || git commit -m "Update Homebrew formula for ${{ github.event.inputs.tag }}"
          git push origin master 

      - name: Install Homebrew
        id: setup-brew
        run: |
          # Ensure necessary dependencies for Homebrew.
          sudo apt-get update
          sudo apt-get install -y build-essential procps curl file git
          
          NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          
          # Configure environment variables for Homebrew.
          echo "HOMEBREW_PREFIX=/home/linuxbrew/.linuxbrew" >> "$GITHUB_ENV"
          echo "HOMEBREW_BIN=/home/linuxbrew/.linuxbrew/bin" >> "$GITHUB_ENV"
          
          # Evaluate shell environment immediately for this step
          echo "eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"" >> "$GITHUB_ENV"
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

      - name: Test Homebrew formula
        # Ensure brew shellenv is evaluated before any brew commands.
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          
          brew install --verbose --debug ./Formula/jdkcerts.rb
          
          # Run a help command to verify it works
          jdkcerts --help || (echo "Formula installed but command failed" && exit 1)

      - name: Cleanup Homebrew formula
        if: always()
        run: |
          # Ensure brew shellenv is evaluated for cleanup.
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew uninstall jdkcerts || true # Use || true to prevent the step from failing if uninstall fails (e.g., not installed)

